{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","hour","setHour","_useState3","_useState4","minutes","setMinutes","_useState5","_useState6","second","setSecond","_useState7","_useState8","isActive","setIsActive","_useState9","_useState10","counter","setCounter","_useState11","_useState12","count","setCount","useEffect","intervalId","setInterval","secondCounter","minuteCounter","Math","floor","hourCounter","computedSecond","String","length","concat","computedMinute","computedHour","clearInterval","react_default","a","createElement","className","onClick","parseInt","ReactDOM","render","src_App","document","getElementById"],"mappings":"sKA6FeA,MA1Ff,WAAe,IAAAC,EACaC,mBAAS,MADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACJK,EADIH,EAAA,GACEI,EADFJ,EAAA,GAAAK,EAEmBN,mBAAS,MAF5BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEJE,EAFID,EAAA,GAEKE,EAFLF,EAAA,GAAAG,EAGiBV,mBAAS,MAH1BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGJE,EAHID,EAAA,GAGIE,EAHJF,EAAA,GAAAG,EAIqBd,oBAAS,GAJ9Be,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAIJE,EAJID,EAAA,GAIME,EAJNF,EAAA,GAAAG,EAKmBlB,mBAAS,GAL5BmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAKJE,EALID,EAAA,GAKKE,EALLF,EAAA,GAAAG,EAMetB,mBAAS,GANxBuB,EAAArB,OAAAC,EAAA,EAAAD,CAAAoB,EAAA,GAMJE,EANID,EAAA,GAMGE,EANHF,EAAA,GAiEX,OA5BAG,oBAAU,WACN,IAAIC,EAuBJ,OAtBGX,IACCW,EAAYC,YAAY,WACpB,IAAMC,EAAgBT,EAAU,GAC1BU,EAAgBC,KAAKC,MAAMZ,EAAQ,IACnCa,EAAcF,KAAKC,MAAOZ,EAAO,KAAe,IAChDc,EAAkD,IAAjCC,OAAON,GAAeO,OAAtB,KAAAC,OAA0CR,GAAgBA,EAC3ES,EAAiD,IAAjCH,OAAOL,GAAeM,OAAtB,KAAAC,OAA0CP,GAAgBA,EAC1ES,EAA6C,IAA9BJ,OAAOF,GAAaG,OAApB,IAAAC,OAAsCJ,GAAcA,EAEtEC,GAAgB,GACfrB,EAAU,MACVJ,EAAW,MACXJ,EAAQ,QAERQ,EAAUqB,GACVzB,EAAW6B,GACXjC,EAAQkC,IAEZlB,EAAW,kBAAID,EAAQI,KAEzB,MAEC,kBAAIgB,cAAcb,KAE3B,CAACX,EAASI,IAGRqB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SAEfH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQxC,GACxBqC,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAWpC,GAC3BiC,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAUhC,IAI5B6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAI5B,GAAaD,IAAW4B,UAAU,SACtD5B,EAAW,QAAS,SACrByB,EAAAC,EAAAC,cAAA,UAAQE,QAnDD,WACfhC,EAAU,MACVJ,EAAW,MACXJ,EAAQ,MACRoB,EAAS,GACTJ,EAAW,KA8CH,UAEJoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,UAAQE,QA3EG,WAChBrB,EAAO,IACNC,EAASD,EAAM,GAEhBA,EAAO,GACNX,EAAUiC,SAASlC,GAAQY,GAE5BZ,GAAQ,IACPC,EAAUiC,SAASlC,MAmEf,KACA6B,EAAAC,EAAAC,cAAA,UAAKnB,GACLiB,EAAAC,EAAAC,cAAA,UAAQE,QAjEG,WAChBrB,GAAO,IACNC,EAASD,EAAM,GAEhBA,EAAM,GACLH,EAAW,SAACD,GAAD,OAAWA,EAAQ,EAAEI,MA4D5B,QClFhBuB,IAASC,OACLP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACM,EAAD,OACGC,SAASC,eAAe","file":"static/js/main.e938858c.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport './App.css'\r\n\r\nfunction App (){\r\n    const [hour, setHour] = useState('00');\r\n    const [minutes, setMinutes] = useState('00');\r\n    const [second, setSecond] = useState('00');\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [counter, setCounter] = useState(0);\r\n    const [count, setCount] = useState(1)\r\n\r\n    const incrementCount = ()=>{\r\n        if(count <10){\r\n            setCount(count+1)\r\n        }\r\n        if(count >1 ){\r\n            setSecond(parseInt(second)+count)\r\n        }\r\n        if(second<=59){\r\n            setSecond(parseInt(second))\r\n        }\r\n        \r\n    }\r\n    const decrementCount = ()=>{\r\n        if(count>-10){\r\n            setCount(count-1)\r\n        }\r\n        if(count<0){\r\n            setCounter((counter)=>counter+1-count)\r\n        }\r\n    }\r\n\r\n    const resetTimer = ()=>{\r\n        setSecond('00')\r\n        setMinutes('00')\r\n        setHour('00')\r\n        setCount(1)\r\n        setCounter(0)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        let intervalId;\r\n        if(isActive){\r\n            intervalId= setInterval(()=>{\r\n                const secondCounter = counter % 60\r\n                const minuteCounter = Math.floor(counter/60)\r\n                const hourCounter = Math.floor((counter/(1000*60*60))%24)\r\n                const computedSecond = String(secondCounter).length === 1 ? `0 ${secondCounter}`:secondCounter;\r\n                const computedMinute =String(minuteCounter).length === 1 ? `0 ${minuteCounter}`:minuteCounter;\r\n                const computedHour = String(hourCounter).length ===1 ? `0${hourCounter}`:hourCounter;\r\n\r\n                if(computedSecond<=0){\r\n                    setSecond('00')\r\n                    setMinutes('00')\r\n                    setHour('00')\r\n                }else{\r\n                    setSecond(computedSecond);\r\n                    setMinutes(computedMinute)\r\n                    setHour(computedHour)\r\n                }\r\n                setCounter(()=>counter+count)\r\n\r\n            },500)\r\n        }\r\n        return ()=>clearInterval(intervalId)\r\n\r\n    },[isActive,counter])\r\n\r\n    return(\r\n        <div className =\"app\">\r\n            <div className = \"timer\">\r\n\r\n              <span className='hour'>{hour}</span>\r\n              <span >:</span>\r\n              <span className='minutes'>{minutes}</span>\r\n              <span>:</span>\r\n              <span className='second'>{second}</span>\r\n\r\n                \r\n            </div> \r\n            <div className=\"buttons\">\r\n                <button onClick={()=>setIsActive(!isActive)} className=\"start\">\r\n                {isActive ? 'Pause': 'Start'}</button>\r\n                <button onClick= {resetTimer}>Reset</button>\r\n            </div>\r\n            <div className=\"count\">\r\n                <button onClick = {incrementCount}>+</button>\r\n                <h1>{count}</h1>\r\n                <button onClick= {decrementCount}>-</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default App;","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <div>\r\n        <App/>\r\n    </div>,document.getElementById('root')\r\n)"],"sourceRoot":""}